import React, { useState, useEffect } from 'react';
import { Wallet, ExternalLink, Search, Copy, CheckCircle, Globe, Layers, X } from 'lucide-react';

const BLOCKCHAIN_EXPLORERS = {
  'EVM Chains': [
    { name: 'Ethereum', url: 'https://etherscan.io', chainId: 1, icon: '⟠', color: 'bg-blue-500' },
    { name: 'Polygon', url: 'https://polygonscan.com', chainId: 137, icon: '⬡', color: 'bg-purple-500' },
    { name: 'BSC', url: 'https://bscscan.com', chainId: 56, icon: '◆', color: 'bg-yellow-500' },
    { name: 'Arbitrum', url: 'https://arbiscan.io', chainId: 42161, icon: '◢', color: 'bg-blue-400' },
    { name: 'Optimism', url: 'https://optimistic.etherscan.io', chainId: 10, icon: '◉', color: 'bg-red-500' },
    { name: 'Avalanche', url: 'https://snowtrace.io', chainId: 43114, icon: '▲', color: 'bg-red-400' },
    { name: 'Base', url: 'https://basescan.org', chainId: 8453, icon: '◎', color: 'bg-blue-600' },
    { name: 'Fantom', url: 'https://ftmscan.com', chainId: 250, icon: '◈', color: 'bg-blue-300' },
    { name: 'Gnosis', url: 'https://gnosisscan.io', chainId: 100, icon: '◇', color: 'bg-teal-500' },
    { name: 'Cronos', url: 'https://cronoscan.com', chainId: 25, icon: '◐', color: 'bg-indigo-500' },
    { name: 'Moonbeam', url: 'https://moonscan.io', chainId: 1284, icon: '◑', color: 'bg-cyan-500' },
    { name: 'Moonriver', url: 'https://moonriver.moonscan.io', chainId: 1285, icon: '◒', color: 'bg-yellow-400' },
    { name: 'Celo', url: 'https://celoscan.io', chainId: 42220, icon: '◓', color: 'bg-green-500' },
    { name: 'Linea', url: 'https://lineascan.build', chainId: 59144, icon: '◔', color: 'bg-gray-700' },
    { name: 'zkSync Era', url: 'https://explorer.zksync.io', chainId: 324, icon: '◕', color: 'bg-purple-600' },
    { name: 'Scroll', url: 'https://scrollscan.com', chainId: 534352, icon: '◖', color: 'bg-orange-500' },
    { name: 'Mantle', url: 'https://explorer.mantle.xyz', chainId: 5000, icon: '◗', color: 'bg-gray-800' },
    { name: 'Blast', url: 'https://blastscan.io', chainId: 81457, icon: '💥', color: 'bg-yellow-600' },
    { name: 'Aurora', url: 'https://aurorascan.dev', chainId: 1313161554, icon: '🌅', color: 'bg-green-400' },
    { name: 'Harmony', url: 'https://explorer.harmony.one', chainId: 1666600000, icon: '🎵', color: 'bg-cyan-400' },
    { name: 'Metis', url: 'https://explorer.metis.io', chainId: 1088, icon: '◘', color: 'bg-blue-700' },
    { name: 'Kava', url: 'https://kavascan.com', chainId: 2222, icon: '◙', color: 'bg-red-600' },
    { name: 'Klaytn', url: 'https://scope.klaytn.com', chainId: 8217, icon: '◚', color: 'bg-orange-600' },
  ],
  'Bitcoin & Forks': [
    { name: 'Bitcoin', url: 'https://blockchair.com/bitcoin', icon: '₿', color: 'bg-orange-500' },
    { name: 'Bitcoin Blockchain', url: 'https://www.blockchain.com/explorer', icon: '₿', color: 'bg-orange-600' },
    { name: 'Bitcoin Mempool', url: 'https://mempool.space', icon: '₿', color: 'bg-orange-400' },
    { name: 'Bitcoin Cash', url: 'https://blockchair.com/bitcoin-cash', icon: '฿', color: 'bg-green-600' },
    { name: 'Litecoin', url: 'https://blockchair.com/litecoin', icon: 'Ł', color: 'bg-gray-400' },
    { name: 'Dogecoin', url: 'https://blockchair.com/dogecoin', icon: 'Ð', color: 'bg-yellow-600' },
  ],
  'Layer 1 Non-EVM': [
    { name: 'Solana', url: 'https://solscan.io', icon: '◎', color: 'bg-purple-600' },
    { name: 'Solana Explorer', url: 'https://explorer.solana.com', icon: '◎', color: 'bg-purple-500' },
    { name: 'Cardano', url: 'https://cardanoscan.io', icon: '₳', color: 'bg-blue-600' },
    { name: 'Polkadot', url: 'https://polkadot.subscan.io', icon: '●', color: 'bg-pink-500' },
    { name: 'Kusama', url: 'https://kusama.subscan.io', icon: '●', color: 'bg-gray-900' },
    { name: 'Cosmos', url: 'https://www.mintscan.io/cosmos', icon: '⚛', color: 'bg-purple-700' },
    { name: 'Near', url: 'https://nearblocks.io', icon: 'Ⓝ', color: 'bg-gray-700' },
    { name: 'Algorand', url: 'https://algoexplorer.io', icon: '◬', color: 'bg-gray-800' },
    { name: 'Aptos', url: 'https://aptoscan.com', icon: '◭', color: 'bg-teal-600' },
    { name: 'Sui', url: 'https://suiscan.xyz', icon: '◮', color: 'bg-blue-500' },
    { name: 'Stellar', url: 'https://stellarchain.io', icon: '✦', color: 'bg-gray-600' },
    { name: 'XRP Ledger', url: 'https://livenet.xrpl.org', icon: '◯', color: 'bg-gray-700' },
    { name: 'Tezos', url: 'https://tzstats.com', icon: '◰', color: 'bg-blue-400' },
    { name: 'Tron', url: 'https://tronscan.org', icon: '◱', color: 'bg-red-600' },
    { name: 'TON', url: 'https://tonscan.org', icon: '💎', color: 'bg-blue-600' },
  ],
  'DEX Aggregators': [
    { name: '1inch', url: 'https://app.1inch.io', icon: '🦄', color: 'bg-red-500' },
    { name: 'ParaSwap', url: 'https://paraswap.io', icon: '🔄', color: 'bg-blue-500' },
    { name: 'Matcha', url: 'https://matcha.xyz', icon: '🍵', color: 'bg-green-500' },
    { name: 'Jupiter', url: 'https://jup.ag', icon: '🪐', color: 'bg-purple-600' },
    { name: 'KyberSwap', url: 'https://kyberswap.com', icon: '⚡', color: 'bg-green-600' },
    { name: 'OpenOcean', url: 'https://openocean.finance', icon: '🌊', color: 'bg-blue-400' },
  ],
  'DeFi Protocols': [
    { name: 'Uniswap', url: 'https://app.uniswap.org', icon: '🦄', color: 'bg-pink-500' },
    { name: 'SushiSwap', url: 'https://www.sushi.com', icon: '🍣', color: 'bg-blue-500' },
    { name: 'PancakeSwap', url: 'https://pancakeswap.finance', icon: '🥞', color: 'bg-yellow-500' },
    { name: 'Curve', url: 'https://curve.fi', icon: '◠', color: 'bg-blue-600' },
    { name: 'Balancer', url: 'https://balancer.fi', icon: '⚖', color: 'bg-gray-700' },
    { name: 'Aave', url: 'https://app.aave.com', icon: '👻', color: 'bg-purple-600' },
    { name: 'Compound', url: 'https://app.compound.finance', icon: '◡', color: 'bg-green-500' },
    { name: 'MakerDAO', url: 'https://makerdao.com', icon: '◢', color: 'bg-teal-600' },
    { name: 'Lido', url: 'https://lido.fi', icon: '🌊', color: 'bg-blue-500' },
    { name: 'Rocket Pool', url: 'https://rocketpool.net', icon: '🚀', color: 'bg-orange-500' },
    { name: 'Convex', url: 'https://www.convexfinance.com', icon: '◣', color: 'bg-gray-800' },
    { name: 'Yearn', url: 'https://yearn.finance', icon: '◤', color: 'bg-blue-700' },
    { name: 'dYdX', url: 'https://trade.dydx.exchange', icon: '◥', color: 'bg-purple-700' },
    { name: 'GMX', url: 'https://app.gmx.io', icon: '◦', color: 'bg-blue-800' },
    { name: 'Raydium', url: 'https://raydium.io', icon: '◧', color: 'bg-purple-500' },
    { name: 'Orca', url: 'https://www.orca.so', icon: '🐋', color: 'bg-cyan-500' },
  ],
  'Analytics & Data': [
    { name: 'DefiLlama', url: 'https://defillama.com', icon: '🦙', color: 'bg-blue-500' },
    { name: 'DexScreener', url: 'https://dexscreener.com', icon: '📊', color: 'bg-gray-700' },
    { name: 'GeckoTerminal', url: 'https://www.geckoterminal.com', icon: '🦎', color: 'bg-green-500' },
    { name: 'Dune Analytics', url: 'https://dune.com', icon: '📈', color: 'bg-orange-500' },
    { name: 'Nansen', url: 'https://www.nansen.ai', icon: '🔍', color: 'bg-blue-600' },
    { name: 'Zapper', url: 'https://zapper.xyz', icon: '⚡', color: 'bg-purple-500' },
    { name: 'Zerion', url: 'https://app.zerion.io', icon: '◎', color: 'bg-blue-500' },
    { name: 'DeBank', url: 'https://debank.com', icon: '🏦', color: 'bg-blue-700' },
  ]
};

const WALLETS = [
  { name: 'MetaMask', injected: 'ethereum', icon: '🦊' },
  { name: 'Coinbase Wallet', injected: 'coinbaseWallet', icon: '🔵' },
  { name: 'Trust Wallet', injected: 'trustWallet', icon: '🛡️' },
  { name: 'Rabby', injected: 'rabby', icon: '🐰' },
  { name: 'Rainbow', injected: 'rainbow', icon: '🌈' },
  { name: 'Zerion', injected: 'zerion', icon: '◉' },
  { name: 'Phantom', injected: 'phantom', icon: '👻' },
  { name: 'Brave Wallet', injected: 'brave', icon: '🦁' },
  { name: 'OKX Wallet', injected: 'okxwallet', icon: '⭐' },
  { name: 'Ledger Live', injected: 'ledger', icon: '🔐' },
  { name: 'Frame', injected: 'frame', icon: '🖼️' },
  { name: 'SafePal', injected: 'safepal', icon: '🔒' },
  { name: 'Bitget Wallet', injected: 'bitget', icon: '💼' },
  { name: 'Enkrypt', injected: 'enkrypt', icon: '🔑' },
  { name: 'Exodus', injected: 'exodus', icon: '🚪' },
  { name: 'TokenPocket', injected: 'tokenpocket', icon: '👝' },
  { name: 'Math Wallet', injected: 'mathwallet', icon: '➗' },
  { name: 'imToken', injected: 'imtoken', icon: '📱' },
  { name: 'Torus', injected: 'torus', icon: '⭕' },
  { name: 'WalletConnect', injected: 'walletconnect', icon: '🔗' },
];

export default function CryptoExplorerHub() {
  const [selectedCategory, setSelectedCategory] = useState('EVM Chains');
  const [selectedExplorer, setSelectedExplorer] = useState(BLOCKCHAIN_EXPLORERS['EVM Chains'][0]);
  const [searchAddress, setSearchAddress] = useState('');
  const [connected, setConnected] = useState(false);
  const [account, setAccount] = useState('');
  const [chainId, setChainId] = useState(null);
  const [balance, setBalance] = useState(null);
  const [copied, setCopied] = useState(false);
  const [showWallets, setShowWallets] = useState(false);
  const [searchFilter, setSearchFilter] = useState('');

  useEffect(() => {
    checkConnection();
    if (window.ethereum) {
      window.ethereum.on('accountsChanged', handleAccountsChanged);
      window.ethereum.on('chainChanged', handleChainChanged);
    }
    return () => {
      if (window.ethereum) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      }
    };
  }, []);

  const checkConnection = async () => {
    if (window.ethereum) {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
        if (accounts.length > 0) {
          setAccount(accounts[0]);
          setConnected(true);
          getChainId();
          getBalance(accounts[0]);
        }
      } catch (err) {
        console.error('Error checking connection:', err);
      }
    }
  };

  const connectWallet = async (walletType) => {
    try {
      let provider = window.ethereum;
      
      if (walletType !== 'ethereum' && window[walletType]) {
        provider = window[walletType];
      }

      if (!provider) {
        alert('Wallet not detected. Please install ' + walletType + ' first.');
        return;
      }

      const accounts = await provider.request({ method: 'eth_requestAccounts' });
      setAccount(accounts[0]);
      setConnected(true);
      setShowWallets(false);
      getChainId();
      getBalance(accounts[0]);
    } catch (err) {
      console.error('Connection error:', err);
      alert('Failed to connect wallet');
    }
  };

  const disconnectWallet = () => {
    setConnected(false);
    setAccount('');
    setBalance(null);
    setChainId(null);
  };

  const getChainId = async () => {
    if (window.ethereum) {
      try {
        const id = await window.ethereum.request({ method: 'eth_chainId' });
        setChainId(parseInt(id, 16));
      } catch (err) {
        console.error('Error getting chain ID:', err);
      }
    }
  };

  const getBalance = async (address) => {
    if (window.ethereum) {
      try {
        const bal = await window.ethereum.request({
          method: 'eth_getBalance',
          params: [address, 'latest']
        });
        const ethBalance = parseInt(bal, 16) / 1e18;
        setBalance(ethBalance.toFixed(4));
      } catch (err) {
        console.error('Error getting balance:', err);
      }
    }
  };

  const handleAccountsChanged = (accounts) => {
    if (accounts.length === 0) {
      disconnectWallet();
    } else {
      setAccount(accounts[0]);
      getBalance(accounts[0]);
    }
  };

  const handleChainChanged = () => {
    window.location.reload();
  };

  const switchChain = async (targetChainId) => {
    if (!window.ethereum) {
      alert('Please connect a wallet first');
      return;
    }
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: '0x' + targetChainId.toString(16) }],
      });
    } catch (err) {
      console.error('Error switching chain:', err);
      alert('Failed to switch network. You may need to add it manually in your wallet.');
    }
  };

  const copyAddress = () => {
    navigator.clipboard.writeText(account);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const openExplorer = (explorer, searchTerm) => {
    let url = explorer.url;
    if (searchTerm) {
      url = url + '/address/' + searchTerm;
    }
    window.open(url, '_blank');
  };

  const handleSearch = () => {
    if (searchAddress) {
      openExplorer(selectedExplorer, searchAddress);
    } else if (account) {
      openExplorer(selectedExplorer, account);
    } else {
      window.open(selectedExplorer.url, '_blank');
    }
  };

  const filteredExplorers = searchFilter
    ? BLOCKCHAIN_EXPLORERS[selectedCategory].filter(exp =>
        exp.name.toLowerCase().includes(searchFilter.toLowerCase())
      )
    : BLOCKCHAIN_EXPLORERS[selectedCategory];

  const totalExplorers = Object.values(BLOCKCHAIN_EXPLORERS).reduce((sum, arr) => sum + arr.length, 0);

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black text-white">
      <div className="bg-gray-800/50 backdrop-blur-sm border-b border-gray-700 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                <Globe className="w-6 h-6" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent">
                  Crypto Explorer Hub
                </h1>
                <p className="text-xs text-gray-400">All chains, all explorers, one place</p>
              </div>
            </div>

            <div className="flex items-center gap-3 flex-wrap">
              {connected ? (
                <>
                  {chainId && (
                    <div className="px-3 py-1 bg-blue-500/20 border border-blue-500/30 rounded-lg text-sm">
                      Chain: {chainId}
                    </div>
                  )}
                  {balance && (
                    <div className="px-3 py-1 bg-green-500/20 border border-green-500/30 rounded-lg text-sm">
                      {balance} ETH
                    </div>
                  )}
                  <button
                    onClick={copyAddress}
                    className="flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                  >
                    {copied ? <CheckCircle className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4" />}
                    <span className="text-sm font-mono">
                      {account.slice(0, 6)}...{account.slice(-4)}
                    </span>
                  </button>
                  <button
                    onClick={disconnectWallet}
                    className="px-4 py-2 bg-red-500/20 hover:bg-red-500/30 border border-red-500/30 rounded-lg transition-colors text-sm"
                  >
                    Disconnect
                  </button>
                </>
              ) : (
                <button
                  onClick={() => setShowWallets(true)}
                  className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 rounded-lg transition-all font-semibold"
                >
                  <Wallet className="w-5 h-5" />
                  Connect Wallet
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {showWallets && (
        <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-gray-800 rounded-2xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">Select Wallet</h2>
              <button
                onClick={() => setShowWallets(false)}
                className="text-gray-400 hover:text-white"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {WALLETS.map((wallet) => (
                <button
                  key={wallet.name}
                  onClick={() => connectWallet(wallet.injected)}
                  className="flex flex-col items-center gap-2 p-4 bg-gray-700/50 hover:bg-gray-700 border border-gray-600 hover:border-blue-500 rounded-xl transition-all"
                >
                  <span className="text-3xl">{wallet.icon}</span>
                  <span className="text-sm font-medium text-center">{wallet.name}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-1 space-y-4">
            <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
              <h2 className="text-lg font-bold mb-4 flex items-center gap-2">
                <Layers className="w-5 h-5" />
                Categories
              </h2>
              <div className="space-y-2">
                {Object.keys(BLOCKCHAIN_EXPLORERS).map((category) => (
                  <button
                    key={category}
                    onClick={() => {
                      setSelectedCategory(category);
                      setSelectedExplorer(BLOCKCHAIN_EXPLORERS[category][0]);
                      setSearchFilter('');
                    }}
                    className={'w-full text-left px-4 py-3 rounded-lg transition-all ' + (selectedCategory === category ? 'bg-blue-600 text-white' : 'bg-gray-700/50 hover:bg-gray-700 text-gray-300')}
                  >
                    <div className="font-semibold">{category}</div>
                    <div className="text-xs opacity-70 mt-1">
                      {BLOCKCHAIN_EXPLORERS[category].length} explorers
                    </div>
                  </button>
                ))}
              </div>
            </div>

            <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
              <h3 className="text-sm font-bold mb-3 text-gray-400">Quick Actions</h3>
              <div className="space-y-2">
                {connected && (
                  <button
                    onClick={() => openExplorer(selectedExplorer, account)}
                    className="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-all text-sm font-medium"
                  >
                    View My Address
                  </button>
                )}
                <button
                  onClick={() => window.open(selectedExplorer.url, '_blank')}
                  className="w-full px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg transition-all text-sm font-medium"
                >
                  Open {selectedExplorer.name}
                </button>
              </div>
            </div>
          </div>

          <div className="lg:col-span-2 space-y-4">
            <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
              <div className="flex gap-3 mb-3">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="text"
                    value={searchAddress}
                    onChange={(e) => setSearchAddress(e.target.value)}
                    placeholder="Enter address, TX hash, or block number..."
                    className="w-full pl-10 pr-4 py-3 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-blue-500 text-white"
                    onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                  />
                </div>
                <button
                  onClick={handleSearch}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg transition-all font-medium"
                >
                  Search
                </button>
              </div>
              <input
                type="text"
                value={searchFilter}
                onChange={(e) => setSearchFilter(e.target.value)}
                placeholder="Filter explorers..."
                className="w-full px-4 py-2 bg-gray-700 border border-gray-600 rounded-lg focus:outline-none focus:border-blue-500 text-white text-sm"
              />
            </div>

            <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-bold">{selectedCategory}</h2>
                <span className="text-sm text-gray-400">
                  {filteredExplorers.length} explorers
                </span>
              </div>
              <div className="grid grid-cols-1 gap-3 max-h-[500px] overflow-y-auto pr-2">
                {filteredExplorers.map((explorer) => (
                  <button
                    key={explorer.name}
                    onClick={() => setSelectedExplorer(explorer)}
                    className={'flex items-center gap-3 p-4 rounded-lg border transition-all group ' + (selectedExplorer.name === explorer.name ? 'bg-blue-600/20 border-blue-500' : 'bg-gray-700/30 border-gray-600 hover:border-blue-500/50')}
                  >
                    <div className={'w-12 h-12 ' + explorer.color + ' rounded-lg flex items-center justify-center text-2xl font-bold flex-shrink-0'}>
                      {explorer.icon}
                    </div>
                    <div className="flex-1 text-left">
                      <div className="font-semibold text-white group-hover:text-blue-400 transition-colors">
                        {explorer.name}
                      </div>
                      {explorer.chainId && (
                        <div className="text-xs text-gray-400 mt-1">
                          Chain ID: {explorer.chainId}
                          {chainId === explorer.chainId && (
                            <span className="ml-2 text-green-400">● Connected</span>
                          )}
                        </div>
                      )}
                    </div>
                    <div className="flex flex-col gap-2">
                      <ExternalLink className="w-5 h-5 text-gray-400 group-hover:text-blue-400 transition-colors" />
                      {explorer.chainId && window.ethereum && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            switchChain(explorer.chainId);
                          }}
                          className="px-2 py-1 bg-blue-500/20 hover:bg-blue-500/30 rounded text-xs"
                          title="Switch to this network"
                        >
                          Switch
                        </button>
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {selectedExplorer && (
              <div className="bg-gradient-to-br from-blue-900/30 to-purple-900/30 backdrop-blur-sm rounded-xl p-6 border border-blue-500/30">
                <div className="flex items-center gap-4 mb-4">
                  <div className={'w-16 h-16 ' + selectedExplorer.color + ' rounded-xl flex items-center justify-center text-3xl'}>
                    {selectedExplorer.icon}
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold">{selectedExplorer.name}</h3>
                    <a
                      href={selectedExplorer.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-400 hover:text-blue-300 text-sm flex items-center gap-1"
                    >
                      {selectedExplorer.url} <ExternalLink className="w-3 h-3" />
                    </a>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={() => window.open(selectedExplorer.url, '_blank')}
                    className="px-4 py-3 bg-blue-600 hover:bg-blue-700 rounded-lg transition-all font-medium flex items-center justify-center gap-2"
                  >
                    <Globe className="w-4 h-4" />
                    Open Explorer
                  </button>
                  {connected && (
                    <button
                      onClick={() => openExplorer(selectedExplorer, account)}
                      className="px-4 py-3 bg-purple-600 hover:bg-purple-700 rounded-lg transition-all font-medium flex items-center justify-center gap-2"
                    >
                      <Wallet className="w-4 h-4" />
                      View My Wallet
                    </button>
                  )}
                  {selectedExplorer.chainId && window.ethereum && (
                    <button
                      onClick={() => switchChain(selectedExplorer.chainId)}
                      className="px-4 py-3 bg-green-600 hover:bg-green-700 rounded-lg transition-all font-medium flex items-center justify-center gap-2 col-span-2"
                    >
                      Switch to Network
                    </button>
                  )}
                </div>

                {selectedExplorer.chainId && (
                  <div className="mt-4 p-3 bg-gray-800/50 rounded-lg">
                    <div className="text-sm text-gray-400">
                      Chain ID: <span className="text-white font-mono">{selectedExplorer.chainId}</span>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        <div className="mt-8 grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
            <div className="text-gray-400 text-sm mb-1">Total Explorers</div>
            <div className="text-2xl font-bold text-blue-400">
              {totalExplorers}
            </div>
          </div>
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
            <div className="text-gray-400 text-sm mb-1">Categories</div>
            <div className="text-2xl font-bold text-purple-400">
              {Object.keys(BLOCKCHAIN_EXPLORERS).length}
            </div>
          </div>
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
            <div className="text-gray-400 text-sm mb-1">Wallet Status</div>
            <div className="text-2xl font-bold text-green-400">
              {connected ? 'Connected' : 'Disconnected'}
            </div>
          </div>
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-xl p-4 border border-gray-700">
            <div className="text-gray-400 text-sm mb-1">Supported Wallets</div>
            <div className="text-2xl font-bold text-orange-400">
              {WALLETS.length}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
