import React, { useState, useEffect } from 'react';
import { Wallet, ExternalLink, Search, Copy, CheckCircle, Globe, Layers, X, Shield, Eye, EyeOff, Lock, Wifi, WifiOff, AlertTriangle, RefreshCw } from 'lucide-react';

const BLOCKCHAIN_EXPLORERS = {
  'Privacy Coins': [
    { name: 'Monero', url: 'https://localmonero.co/blocks', icon: 'Ɱ', color: 'bg-orange-600', ticker: 'XMR' },
    { name: 'Monero Explorer', url: 'https://xmrchain.net', icon: 'Ɱ', color: 'bg-orange-700', ticker: 'XMR' },
    { name: 'Zcash', url: 'https://zcashblockexplorer.com', icon: '⚡', color: 'bg-yellow-600', ticker: 'ZEC' },
    { name: 'Zcash Mainnet', url: 'https://explorer.zcha.in', icon: '⚡', color: 'bg-yellow-700', ticker: 'ZEC' },
    { name: 'Dash', url: 'https://explorer.dash.org', icon: 'Đ', color: 'bg-blue-600', ticker: 'DASH' },
    { name: 'Horizen', url: 'https://explorer.horizen.io', icon: '◈', color: 'bg-cyan-700', ticker: 'ZEN' },
    { name: 'Verge', url: 'https://verge-blockchain.info', icon: '◎', color: 'bg-gray-700', ticker: 'XVG' },
    { name: 'PIVX', url: 'https://explorer.pivx.org', icon: '◆', color: 'bg-purple-700', ticker: 'PIVX' },
    { name: 'Firo', url: 'https://explorer.firo.org', icon: '◉', color: 'bg-red-700', ticker: 'FIRO' },
    { name: 'Beam', url: 'https://explorer.beam.mw', icon: '◭', color: 'bg-blue-500', ticker: 'BEAM' },
    { name: 'Grin', url: 'https://grin.blockscan.com', icon: '◮', color: 'bg-yellow-500', ticker: 'GRIN' },
    { name: 'NavCoin', url: 'https://www.navexplorer.com', icon: '◬', color: 'bg-indigo-600', ticker: 'NAV' },
    { name: 'Decred', url: 'https://dcrdata.decred.org', icon: '◰', color: 'bg-teal-700', ticker: 'DCR' },
    { name: 'Particl', url: 'https://explorer.particl.io', icon: '◱', color: 'bg-green-700', ticker: 'PART' },
    { name: 'Oxen', url: 'https://oxen.observer', icon: '◲', color: 'bg-green-600', ticker: 'OXEN' },
  ],
  'Privacy Tokens (EVM)': [
    { name: 'Tornado Cash (ETH)', url: 'https://etherscan.io/address/0x722122df12d4e14e13ac3b6895a86e84145b6967', icon: '🌪️', color: 'bg-gray-800', chainId: 1, ticker: 'TORN' },
    { name: 'Secret Network', url: 'https://www.mintscan.io/secret', icon: '🔐', color: 'bg-gray-900', ticker: 'SCRT' },
    { name: 'Railgun', url: 'https://etherscan.io/token/0xe76C6c83af64e4C60245D8C7dE953DF673a7A33D', icon: '🚂', color: 'bg-purple-800', chainId: 1, ticker: 'RAIL' },
    { name: 'Aztec Network', url: 'https://aztec.network', icon: '🔺', color: 'bg-blue-900', ticker: 'AZTEC' },
    { name: 'Incognito', url: 'https://explorer.incognito.org', icon: '👤', color: 'bg-gray-700', ticker: 'PRV' },
    { name: 'Keep Network', url: 'https://etherscan.io/token/0x85eee30c52b0b379b046fb0f85f4f3dc3009afec', icon: '🔑', color: 'bg-cyan-800', chainId: 1, ticker: 'KEEP' },
    { name: 'NuCypher', url: 'https://etherscan.io/token/0x4fe83213d56308330ec302a8bd641f1d0113a4cc', icon: '⚛️', color: 'bg-blue-800', chainId: 1, ticker: 'NU' },
    { name: 'Oasis Network', url: 'https://www.oasisscan.com', icon: '🌴', color: 'bg-blue-700', ticker: 'ROSE' },
    { name: 'Dusk Network', url: 'https://explorer.dusk.network', icon: '🌙', color: 'bg-purple-900', ticker: 'DUSK' },
    { name: 'MobileCoin', url: 'https://block.mobilecoin.com', icon: '📱', color: 'bg-green-800', ticker: 'MOB' },
    { name: 'Findora', url: 'https://evm.findorascan.io', icon: '🔍', color: 'bg-orange-800', ticker: 'FRA' },
    { name: 'Panther Protocol', url: 'https://www.pantherprotocol.io', icon: '🐆', color: 'bg-gray-800', ticker: 'ZKP' },
  ],
  'Privacy Mixers & Tools': [
    { name: 'Tornado Cash', url: 'https://tornadocash.eth.limo', icon: '🌪️', color: 'bg-gray-900' },
    { name: 'Cyclone Protocol', url: 'https://cyclone.xyz', icon: '🌀', color: 'bg-blue-800' },
    { name: 'Railway', url: 'https://railway.xyz', icon: '🚄', color: 'bg-purple-700' },
    { name: 'Umbra Cash', url: 'https://app.umbra.cash', icon: '☂️', color: 'bg-gray-700' },
    { name: 'Aztec Connect', url: 'https://zk.money', icon: '🔺', color: 'bg-blue-900' },
    { name: 'Elusiv (Solana)', url: 'https://elusiv.io', icon: '👻', color: 'bg-purple-800' },
    { name: 'Light Protocol', url: 'https://www.lightprotocol.com', icon: '💡', color: 'bg-yellow-700' },
    { name: 'Webb Protocol', url: 'https://www.webb.tools', icon: '🕸️', color: 'bg-indigo-800' },
    { name: 'Blank Wallet', url: 'https://blockwallet.io', icon: '🔲', color: 'bg-gray-800' },
    { name: 'Sienna Network', url: 'https://sienna.network', icon: '🌅', color: 'bg-orange-700' },
  ],
  'Privacy Wallets': [
    { name: 'Wasabi Wallet', url: 'https://wasabiwallet.io', icon: '🟢', color: 'bg-green-700', download: true },
    { name: 'Samourai Wallet', url: 'https://samouraiwallet.com', icon: '⚔️', color: 'bg-red-700', download: true },
    { name: 'Sparrow Wallet', url: 'https://sparrowwallet.com', icon: '🦅', color: 'bg-blue-700', download: true },
    { name: 'Monero GUI', url: 'https://www.getmonero.org/downloads', icon: 'Ɱ', color: 'bg-orange-700', download: true },
    { name: 'Cake Wallet', url: 'https://cakewallet.com', icon: '🎂', color: 'bg-purple-700', download: true },
    { name: 'Monerujo', url: 'https://www.monerujo.io', icon: 'Ɱ', color: 'bg-orange-600', download: true },
    { name: 'MyMonero', url: 'https://mymonero.com', icon: 'Ɱ', color: 'bg-orange-500', download: true },
    { name: 'Feather Wallet', url: 'https://featherwallet.org', icon: '🪶', color: 'bg-gray-700', download: true },
    { name: 'Edge Wallet', url: 'https://edge.app', icon: '◆', color: 'bg-blue-600', download: true },
    { name: 'ZecWallet', url: 'https://www.zecwallet.co', icon: '⚡', color: 'bg-yellow-600', download: true },
    { name: 'Nighthawk Wallet', url: 'https://nighthawkwallet.com', icon: '🦅', color: 'bg-gray-900', download: true },
    { name: 'Railway Wallet', url: 'https://railway.xyz', icon: '🚂', color: 'bg-purple-700', download: true },
    { name: 'BlockWallet', url: 'https://blockwallet.io', icon: '🔲', color: 'bg-gray-800', download: true },
    { name: 'Frame Wallet', url: 'https://frame.sh', icon: '🖼️', color: 'bg-indigo-700', download: true },
  ],
  'Privacy Explorers': [
    { name: 'Blockchair Privacy', url: 'https://blockchair.com', icon: '🔍', color: 'bg-blue-700' },
    { name: 'OXT Research', url: 'https://oxt.me', icon: '📊', color: 'bg-purple-700' },
    { name: 'Monero Blocks', url: 'https://moneroblocks.info', icon: 'Ɱ', color: 'bg-orange-700' },
    { name: 'XMR Chain', url: 'https://xmrchain.net', icon: 'Ɱ', color: 'bg-orange-600' },
    { name: 'Zcash Explorer', url: 'https://zcashblockexplorer.com', icon: '⚡', color: 'bg-yellow-600' },
    { name: 'Secret Explorer', url: 'https://www.mintscan.io/secret', icon: '🔐', color: 'bg-gray-900' },
    { name: 'Firo Explorer', url: 'https://explorer.firo.org', icon: '◉', color: 'bg-red-700' },
    { name: 'Beam Explorer', url: 'https://explorer.beam.mw', icon: '◭', color: 'bg-blue-500' },
    { name: 'Grin Explorer', url: 'https://grin.blockscan.com', icon: '◮', color: 'bg-yellow-500' },
  ],
  'Privacy DEX & DeFi': [
    { name: 'Incognito DEX', url: 'https://incognito.org', icon: '👤', color: 'bg-gray-800' },
    { name: 'Railway DEX', url: 'https://railway.xyz', icon: '🚂', color: 'bg-purple-700' },
    { name: 'Sienna Swap', url: 'https://app.sienna.network', icon: '🌅', color: 'bg-orange-700' },
    { name: 'Secret Swap', url: 'https://www.secretswap.net', icon: '🔐', color: 'bg-gray-900' },
    { name: 'Shade Protocol', url: 'https://shadeprotocol.io', icon: '🌑', color: 'bg-gray-800' },
    { name: 'Penumbra DEX', url: 'https://penumbra.zone', icon: '🌘', color: 'bg-purple-900' },
    { name: 'Aztec DeFi', url: 'https://aztec.network', icon: '🔺', color: 'bg-blue-900' },
  ],
  'VPN & Tor Services': [
    { name: 'Tor Browser', url: 'https://www.torproject.org', icon: '🧅', color: 'bg-purple-800', download: true },
    { name: 'Mullvad VPN', url: 'https://mullvad.net', icon: '🔒', color: 'bg-blue-800', download: true },
    { name: 'ProtonVPN', url: 'https://protonvpn.com', icon: '🛡️', color: 'bg-green-700', download: true },
    { name: 'IVPN', url: 'https://www.ivpn.net', icon: '🔐', color: 'bg-blue-700', download: true },
    { name: 'NordVPN', url: 'https://nordvpn.com', icon: '🌐', color: 'bg-blue-600', download: true },
    { name: 'ExpressVPN', url: 'https://www.expressvpn.com', icon: '⚡', color: 'bg-red-600', download: true },
    { name: 'Lokinet', url: 'https://lokinet.org', icon: '🕸️', color: 'bg-green-800', download: true },
    { name: 'I2P Network', url: 'https://geti2p.net', icon: '🌀', color: 'bg-purple-700', download: true },
  ]
};

const WALLETS = [
  { name: 'MetaMask', injected: 'ethereum', icon: '🦊', installed: false },
  { name: 'Rabby', injected: 'rabby', icon: '🐰', installed: false },
  { name: 'Rainbow', injected: 'rainbow', icon: '🌈', installed: false },
  { name: 'Coinbase Wallet', injected: 'coinbaseWallet', icon: '🔵', installed: false },
  { name: 'Trust Wallet', injected: 'trustWallet', icon: '🛡️', installed: false },
  { name: 'Zerion', injected: 'zerion', icon: '◉', installed: false },
  { name: 'Phantom', injected: 'phantom', icon: '👻', installed: false },
  { name: 'Brave Wallet', injected: 'brave', icon: '🦁', installed: false },
  { name: 'OKX Wallet', injected: 'okxwallet', icon: '⭐', installed: false },
  { name: 'Ledger Live', injected: 'ledger', icon: '🔐', installed: false },
  { name: 'Frame', injected: 'frame', icon: '🖼️', installed: false },
  { name: 'SafePal', injected: 'safepal', icon: '🔒', installed: false },
  { name: 'Bitget Wallet', injected: 'bitget', icon: '💼', installed: false },
  { name: 'Enkrypt', injected: 'enkrypt', icon: '🔑', installed: false },
  { name: 'Exodus', injected: 'exodus', icon: '🚪', installed: false },
  { name: 'TokenPocket', injected: 'tokenpocket', icon: '👝', installed: false },
  { name: 'Math Wallet', injected: 'mathwallet', icon: '➗', installed: false },
  { name: 'imToken', injected: 'imtoken', icon: '📱', installed: false },
  { name: 'WalletConnect', injected: 'walletconnect', icon: '🔗', installed: false },
  { name: 'Torus', injected: 'torus', icon: '⭕', installed: false },
];

export default function CryptoExplorerHub() {
  const [selectedCategory, setSelectedCategory] = useState('Privacy Coins');
  const [selectedExplorer, setSelectedExplorer] = useState(BLOCKCHAIN_EXPLORERS['Privacy Coins'][0]);
  const [searchAddress, setSearchAddress] = useState('');
  const [connected, setConnected] = useState(false);
  const [account, setAccount] = useState('');
  const [chainId, setChainId] = useState(null);
  const [balance, setBalance] = useState(null);
  const [copied, setCopied] = useState(false);
  const [showWallets, setShowWallets] = useState(false);
  const [searchFilter, setSearchFilter] = useState('');
  const [privacyMode, setPrivacyMode] = useState(true);
  const [connectionMethod, setConnectionMethod] = useState('direct'); // 'direct', 'vpn', 'tor'
  const [installedWallets, setInstalledWallets] = useState([]);
  const [showSecurityNotice, setShowSecurityNotice] = useState(true);
  const [networkStatus, setNetworkStatus] = useState('online');

  useEffect(() => {
    detectInstalledWallets();
    checkConnection();
    checkNetworkStatus();
    if (window.ethereum) {
      window.ethereum.on('accountsChanged', handleAccountsChanged);
      window.ethereum.on('chainChanged', handleChainChanged);
    }
    return () => {
      if (window.ethereum) {
        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);
        window.ethereum.removeListener('chainChanged', handleChainChanged);
      }
    };
  }, []);

  const checkNetworkStatus = () => {
    setNetworkStatus(navigator.onLine ? 'online' : 'offline');
    window.addEventListener('online', () => setNetworkStatus('online'));
    window.addEventListener('offline', () => setNetworkStatus('offline'));
  };

  const detectInstalledWallets = () => {
    const detected = [];
    WALLETS.forEach(wallet => {
      if (wallet.injected === 'ethereum' && window.ethereum) {
        detected.push(wallet.name);
      } else if (window[wallet.injected]) {
        detected.push(wallet.name);
      }
    });
    setInstalledWallets(detected);
  };

  const checkConnection = async () => {
    if (window.ethereum) {
      try {
        const accounts = await window.ethereum.request({ method: 'eth_accounts' });
        if (accounts.length > 0) {
          setAccount(accounts[0]);
          setConnected(true);
          getChainId();
          getBalance(accounts[0]);
        }
      } catch (err) {
        console.error('Error checking connection:', err);
      }
    }
  };

  const connectWallet = async (walletType) => {
    try {
      let provider = window.ethereum;
      
      if (walletType !== 'ethereum' && window[walletType]) {
        provider = window[walletType];
      }

      if (!provider) {
        alert(`${walletType} wallet not detected. Please install it first from the official website.`);
        return;
      }

      const accounts = await provider.request({ method: 'eth_requestAccounts' });
      setAccount(accounts[0]);
      setConnected(true);
      setShowWallets(false);
      getChainId();
      getBalance(accounts[0]);
    } catch (err) {
      console.error('Connection error:', err);
      if (err.code === 4001) {
        alert('Connection request rejected. Please try again.');
      } else {
        alert('Failed to connect wallet. Please try again.');
      }
    }
  };

  const disconnectWallet = () => {
    setConnected(false);
    setAccount('');
    setBalance(null);
    setChainId(null);
  };

  const getChainId = async () => {
    if (window.ethereum) {
      try {
        const id = await window.ethereum.request({ method: 'eth_chainId' });
        setChainId(parseInt(id, 16));
      } catch (err) {
        console.error('Error getting chain ID:', err);
      }
    }
  };

  const getBalance = async (address) => {
    if (window.ethereum) {
      try {
        const bal = await window.ethereum.request({
          method: 'eth_getBalance',
          params: [address, 'latest']
        });
        const ethBalance = parseInt(bal, 16) / 1e18;
        setBalance(ethBalance.toFixed(4));
      } catch (err) {
        console.error('Error getting balance:', err);
      }
    }
  };

  const handleAccountsChanged = (accounts) => {
    if (accounts.length === 0) {
      disconnectWallet();
    } else {
      setAccount(accounts[0]);
      getBalance(accounts[0]);
    }
  };

  const handleChainChanged = () => {
    window.location.reload();
  };

  const switchChain = async (targetChainId) => {
    if (!window.ethereum) {
      alert('Please connect a wallet first');
      return;
    }
    try {
      await window.ethereum.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: '0x' + targetChainId.toString(16) }],
      });
    } catch (err) {
      if (err.code === 4902) {
        alert('This network is not added to your wallet. Please add it manually.');
      } else {
        console.error('Error switching chain:', err);
        alert('Failed to switch network. You may need to add it manually in your wallet.');
      }
    }
  };

  const copyAddress = () => {
    navigator.clipboard.writeText(account);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const openExplorer = (explorer, searchTerm) => {
    let url = explorer.url;
    if (searchTerm && !explorer.download) {
      if (url.includes('etherscan.io') || url.includes('polygonscan.com') || url.includes('bscscan.com')) {
        url = url + '/address/' + searchTerm;
      }
    }
    window.open(url, '_blank', 'noopener,noreferrer');
  };

  const handleSearch = () => {
    if (searchAddress) {
      openExplorer(selectedExplorer, searchAddress);
    } else if (account) {
      openExplorer(selectedExplorer, account);
    } else {
      window.open(selectedExplorer.url, '_blank', 'noopener,noreferrer');
    }
  };

  const filteredExplorers = searchFilter
    ? BLOCKCHAIN_EXPLORERS[selectedCategory].filter(exp =>
        exp.name.toLowerCase().includes(searchFilter.toLowerCase())
      )
    : BLOCKCHAIN_EXPLORERS[selectedCategory];

  const totalExplorers = Object.values(BLOCKCHAIN_EXPLORERS).reduce((sum, arr) => sum + arr.length, 0);

  const maskAddress = (addr) => {
    if (!privacyMode) return addr;
    return addr.slice(0, 6) + '•••••' + addr.slice(-4);
  };

  const getConnectionStatusColor = () => {
    switch (connectionMethod) {
      case 'tor': return 'bg-purple-500';
      case 'vpn': return 'bg-blue-500';
      default: return 'bg-yellow-500';
    }
  };

  const getConnectionStatusText = () => {
    switch (connectionMethod) {
      case 'tor': return '🧅 Tor Network';
      case 'vpn': return '🔒 VPN Active';
      default: return '⚠️ Direct Connection';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 text-white">
      {showSecurityNotice && (
        <div className="bg-red-900/20 border-b border-red-500/30 backdrop-blur-sm">
          <div className="max-w-7xl mx-auto px-4 py-3">
            <div className="flex items-start gap-3">
              <AlertTriangle className="w-5 h-5 text-red-400 flex-shrink-0 mt-0.5" />
              <div className="flex-1">
                <div className="text-sm text-red-200">
                  <strong>Security Notice:</strong> For maximum privacy, use Tor Browser or VPN when accessing privacy tools. Never share private keys. Always verify URLs before connecting wallets.
                </div>
              </div>
              <button
                onClick={() => setShowSecurityNotice(false)}
                className="text-red-400 hover:text-red-300"
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      )}

      <div className="bg-gray-900/80 backdrop-blur-sm border-b border-gray-700 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-600 to-gray-800 rounded-lg flex items-center justify-center">
                <Shield className="w-6 h-6" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-gray-300 bg-clip-text text-transparent">
                  Privacy Crypto Hub
                </h1>
                <p className="text-xs text-gray-400">Secure • Anonymous • Decentralized</p>
              </div>
            </div>

            <div className="flex items-center gap-3 flex-wrap">
              <div className="flex items-center gap-2 px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg">
                {networkStatus === 'online' ? (
                  <Wifi className="w-4 h-4 text-green-400" />
                ) : (
                  <WifiOff className="w-4 h-4 text-red-400" />
                )}
                <span className="text-xs">{networkStatus === 'online' ? 'Online' : 'Offline'}</span>
              </div>

              <select
                value={connectionMethod}
                onChange={(e) => setConnectionMethod(e.target.value)}
                className="px-3 py-2 bg-gray-800 border border-gray-700 rounded-lg text-sm focus:outline-none focus:border-purple-500"
              >
                <option value="direct">⚠️ Direct</option>
                <option value="vpn">🔒 VPN</option>
                <option value="tor">🧅 Tor</option>
              </select>

              <div className={`px-3 py-2 ${getConnectionStatusColor()}/20 border ${getConnectionStatusColor()}/30 rounded-lg text-xs`}>
                {getConnectionStatusText()}
              </div>

              <button
                onClick={() => setPrivacyMode(!privacyMode)}
                className="px-3 py-2 bg-gray-800 hover:bg-gray-700 border border-gray-600 rounded-lg transition-colors flex items-center gap-2"
                title={privacyMode ? 'Privacy Mode On' : 'Privacy Mode Off'}
              >
                {privacyMode ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                <span className="text-sm">{privacyMode ? 'Hidden' : 'Visible'}</span>
              </button>
              {connected ? (
                <>
                  {chainId && (
                    <div className="px-3 py-1 bg-purple-500/20 border border-purple-500/30 rounded-lg text-sm">
                      Chain: {chainId}
                    </div>
                  )}
                  {balance && (
                    <div className="px-3 py-1 bg-green-500/20 border border-green-500/30 rounded-lg text-sm">
                      {privacyMode ? '•••••' : balance} ETH
                    </div>
                  )}
                  <button
                    onClick={copyAddress}
                    className="flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
                  >
                    {copied ? <CheckCircle className="w-4 h-4 text-green-400" /> : <Copy className="w-4 h-4" />}
                    <span className="text-sm font-mono">
                      {maskAddress(account)}
                    </span>
                  </button>
                  <button
                    onClick={disconnectWallet}
                    className="px-4 py-2 bg-red-500/20 hover:bg-red-500/30 border border-red-500/30 rounded-lg transition-colors text-sm"
                  >
                    Disconnect
                  </button>
                </>
              ) : (
                <button
                  onClick={() => setShowWallets(true)}
                  className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-purple-600 to-gray-700 hover:from-purple-700 hover:to-gray-800 rounded-lg transition-all font-semibold"
                >
                  <Wallet className="w-5 h-5" />
                  Connect Wallet
                </button>
              )}
            </div>
          </div>
        </div>
      </div>

      {showWallets && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-gray-900 border border-gray-700 rounded-2xl p-6 max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-6">
              <div>
                <h2 className="text-2xl font-bold flex items-center gap-2">
                  <Shield className="w-6 h-6 text-purple-400" />
                  Connect Privacy Wallet
                </h2>
                <p className="text-sm text-gray-400 mt-1">
                  {installedWallets.length} wallet(s) detected on your browser
                </p>
              </div>
              <button
                onClick={() => setShowWallets(false)}
                className="text-gray-400 hover:text-white"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
              {WALLETS.map((wallet) => {
                const isInstalled = installedWallets.includes(wallet.name);
                return (
                  <button
                    key={wallet.name}
                    onClick={() => connectWallet(wallet.injected)}
                    className={`flex flex-col items-center gap-2 p-4 rounded-xl transition-all relative ${
                      isInstalled
                        ? 'bg-gray-800/50 hover:bg-gray-800 border border-gray-700 hover:border-purple-500'
                        : 'bg-gray-800/20 border border-gray-800 opacity-50 cursor-not-allowed'
                    }`}
                    disabled={!isInstalled}
                  >
                    {isInstalled && (
                      <div className="absolute top-2 right-2 w-2 h-2 bg-green-400 rounded-full"></div>
                    )}
                    <span className="text-3xl">{wallet.icon}</span>
                    <span className="text-sm font-medium text-center">{wallet.name}</span>
                    {!isInstalled && (
                      <span className="text-xs text-gray-500">Not Installed</span>
                    )}
                  </button>
                );
              })}
            </div>
            <div className="mt-6 p-4 bg-yellow-900/20 border border-yellow-500/30 rounded-lg">
              <div className="flex items-start gap-2">
                <Lock className="w-4 h-4 text-yellow-400 flex-shrink-0 mt-0.5" />
                <div className="text-xs text-yellow-200">
                  <strong>Security Tip:</strong> Only connect wallets you trust. Verify you're on the correct website before connecting.
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="max-w-7xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-1 space-y-4">
            <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
              <h2 className="text-lg font-bold mb-4 flex items-center gap-2">
                <Layers className="w-5 h-5 text-purple-400" />
                Privacy Categories
              </h2>
              <div className="space-y-2">
                {Object.keys(BLOCKCHAIN_EXPLORERS).map((category) => (
                  <button
                    key={category}
                    onClick={() => {
                      setSelectedCategory(category);
                      setSelectedExplorer(BLOCKCHAIN_EXPLORERS[category][0]);
                      setSearchFilter('');
                    }}
                    className={'w-full text-left px-4 py-3 rounded-lg transition-all ' + (selectedCategory === category ? 'bg-purple-600 text-white shadow-lg shadow-purple-500/20' : 'bg-gray-800/50 hover:bg-gray-800 text-gray-300')}
                  >
                    <div className="font-semibold">{category}</div>
                    <div className="text-xs opacity-70 mt-1">
                      {BLOCKCHAIN_EXPLORERS[category].length} resources
                    </div>
                  </button>
                ))}
              </div>
            </div>

            <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
              <h3 className="text-sm font-bold mb-3 text-gray-400 flex items-center gap-2">
                <Shield className="w-4 h-4" />
                Quick Actions
              </h3>
              <div className="space-y-2">
                {connected && (
                  <button
                    onClick={() => openExplorer(selectedExplorer, account)}
                    className="w-full px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-lg transition-all text-sm font-medium"
                  >
                    View My Address
                  </button>
                )}
                <button
                  onClick={() => window.open(selectedExplorer.url, '_blank', 'noopener,noreferrer')}
                  className="w-full px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-all text-sm font-medium flex items-center justify-center gap-2"
                >
                  {selectedExplorer.download && (
                    <span>⬇️</span>
                  )}
                  Open {selectedExplorer.name}
                </button>
                <button
                  onClick={detectInstalledWallets}
                  className="w-full px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg transition-all text-sm font-medium flex items-center justify-center gap-2"
                >
                  <RefreshCw className="w-4 h-4" />
                  Detect Wallets
                </button>
              </div>
            </div>

            <div className="bg-gradient-to-br from-purple-900/30 to-gray-900/30 backdrop-blur-sm rounded-xl p-4 border border-purple-500/30">
              <h3 className="text-sm font-bold mb-2 text-purple-400">Connection Security</h3>
              <div className="text-xs text-gray-300 space-y-2">
                <div className="flex items-center gap-2">
                  <div className={`w-2 h-2 rounded-full ${connectionMethod === 'tor' ? 'bg-green-400' : 'bg-red-400'}`}></div>
                  <span>Tor Network: {connectionMethod === 'tor' ? 'Active' : 'Inactive'}</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className={`w-2 h-2 rounded-full ${connectionMethod === 'vpn' ? 'bg-green-400' : 'bg-red-400'}`}></div>
                  <span>VPN: {connectionMethod === 'vpn' ? 'Active' : 'Inactive'}</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className={`w-2 h-2 rounded-full ${privacyMode ? 'bg-green-400' : 'bg-yellow-400'}`}></div>
                  <span>Privacy Mode: {privacyMode ? 'Enabled' : 'Disabled'}</span>
                </div>
              </div>
            </div>
          </div>

          <div className="lg:col-span-2 space-y-4">
            <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
              <div className="flex gap-3 mb-3">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                  <input
                    type="text"
                    value={searchAddress}
                    onChange={(e) => setSearchAddress(e.target.value)}
                    placeholder="Enter address, TX hash, or block number..."
                    className="w-full pl-10 pr-4 py-3 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-purple-500 text-white"
                    onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                  />
                </div>
                <button
                  onClick={handleSearch}
                  className="px-6 py-3 bg-purple-600 hover:bg-purple-700 rounded-lg transition-all font-medium"
                >
                  Search
                </button>
              </div>
              <input
                type="text"
                value={searchFilter}
                onChange={(e) => setSearchFilter(e.target.value)}
                placeholder="Filter resources..."
                className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-purple-500 text-white text-sm"
              />
            </div>

            <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-lg font-bold flex items-center gap-2">
                  <Shield className="w-5 h-5 text-purple-400" />
                  {selectedCategory}
                </h2>
                <span className="text-sm text-gray-400">
                  {filteredExplorers.length} resources
                </span>
              </div>
              <div className="grid grid-cols-1 gap-3 max-h-[500px] overflow-y-auto pr-2">
                {filteredExplorers.map((explorer) => (
                  <button
                    key={explorer.name}
                    onClick={() => setSelectedExplorer(explorer)}
                    className={'flex items-center gap-3 p-4 rounded-lg border transition-all group ' + (selectedExplorer.name === explorer.name ? 'bg-purple-600/20 border-purple-500 shadow-lg shadow-purple-500/10' : 'bg-gray-800/30 border-gray-700 hover:border-purple-500/50')}
                  >
                    <div className={'w-12 h-12 ' + explorer.color + ' rounded-lg flex items-center justify-center text-2xl font-bold flex-shrink-0'}>
                      {explorer.icon}
                    </div>
                    <div className="flex-1 text-left">
                      <div className="font-semibold text-white group-hover:text-purple-400 transition-colors flex items-center gap-2">
                        {explorer.name}
                        {explorer.download && (
                          <span className="text-xs bg-blue-500/20 text-blue-400 px-2 py-0.5 rounded">Download</span>
                        )}
                      </div>
                      <div className="text-xs text-gray-400 mt-1">
                        {explorer.ticker && <span className="text-purple-400 font-mono mr-2">{explorer.ticker}</span>}
                        {explorer.chainId && (
                          <>
                            Chain ID: {explorer.chainId}
                            {chainId === explorer.chainId && (
                              <span className="ml-2 text-green-400">● Connected</span>
                            )}
                          </>
                        )}
                      </div>
                    </div>
                    <div className="flex flex-col gap-2">
                      <ExternalLink className="w-5 h-5 text-gray-400 group-hover:text-purple-400 transition-colors" />
                      {explorer.chainId && window.ethereum && (
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            switchChain(explorer.chainId);
                          }}
                          className="px-2 py-1 bg-purple-500/20 hover:bg-purple-500/30 rounded text-xs"
                          title="Switch to this network"
                        >
                          Switch
                        </button>
                      )}
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {selectedExplorer && (
              <div className="bg-gradient-to-br from-purple-900/30 to-gray-900/30 backdrop-blur-sm rounded-xl p-6 border border-purple-500/30">
                <div className="flex items-center gap-4 mb-4">
                  <div className={'w-16 h-16 ' + selectedExplorer.color + ' rounded-xl flex items-center justify-center text-3xl'}>
                    {selectedExplorer.icon}
                  </div>
                  <div>
                    <h3 className="text-2xl font-bold flex items-center gap-2">
                      {selectedExplorer.name}
                      {selectedExplorer.download && (
                        <span className="text-sm bg-blue-500/20 text-blue-400 px-3 py-1 rounded-full">Download Required</span>
                      )}
                    </h3>
                    {selectedExplorer.ticker && (
                      <div className="text-purple-400 font-mono text-sm">{selectedExplorer.ticker}</div>
                    )}
                    <a
                      href={selectedExplorer.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-purple-400 hover:text-purple-300 text-sm flex items-center gap-1"
                    >
                      {selectedExplorer.url} <ExternalLink className="w-3 h-3" />
                    </a>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={() => window.open(selectedExplorer.url, '_blank', 'noopener,noreferrer')}
                    className="px-4 py-3 bg-purple-600 hover:bg-purple-700 rounded-lg transition-all font-medium flex items-center justify-center gap-2"
                  >
                    <Globe className="w-4 h-4" />
                    {selectedExplorer.download ? 'Download' : 'Open'} {selectedExplorer.name}
                  </button>
                  {connected && !selectedExplorer.download && (
                    <button
                      onClick={() => openExplorer(selectedExplorer, account)}
                      className="px-4 py-3 bg-gray-700 hover:bg-gray-600 rounded-lg transition-all font-medium flex items-center justify-center gap-2"
                    >
                      <Wallet className="w-4 h-4" />
                      View My Wallet
                    </button>
                  )}
                  {selectedExplorer.chainId && window.ethereum && (
                    <button
                      onClick={() => switchChain(selectedExplorer.chainId)}
                      className="px-4 py-3 bg-green-600 hover:bg-green-700 rounded-lg transition-all font-medium flex items-center justify-center gap-2 col-span-2"
                    >
                      Switch to Network
                    </button>
                  )}
                </div>

                {selectedExplorer.chainId && (
                  <div className="mt-4 p-3 bg-gray-800/50 rounded-lg">
                    <div className="text-sm text-gray-400">
                      Chain ID: <span className="text-white font-mono">{selectedExplorer.chainId}</span>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        <div className="mt-8 grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
            <div className="text-gray-400 text-sm mb-1 flex items-center gap-2">
              <Shield className="w-4 h-4" />
              Total Resources
            </div>
            <div className="text-2xl font-bold text-purple-400">
              {totalExplorers}
            </div>
          </div>
          <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
            <div className="text-gray-400 text-sm mb-1">Categories</div>
            <div className="text-2xl font-bold text-gray-300">
              {Object.keys(BLOCKCHAIN_EXPLORERS).length}
            </div>
          </div>
          <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
            <div className="text-gray-400 text-sm mb-1">Wallet Status</div>
            <div className="text-2xl font-bold text-green-400">
              {connected ? 'Connected' : 'Disconnected'}
            </div>
          </div>
          <div className="bg-gray-900/70 backdrop-blur-sm rounded-xl p-4 border border-gray-800">
            <div className="text-gray-400 text-sm mb-1">Detected Wallets</div>
            <div className="text-2xl font-bold text-orange-400">
              {installedWallets.length}
            </div>
          </div>
        </div>

        <div className="mt-6 bg-gray-900/70 backdrop-blur-sm rounded-xl p-6 border border-gray-800">
          <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
            <Shield className="w-5 h-5 text-purple-400" />
            Privacy & Security Best Practices
          </h3>
          <div className="grid md:grid-cols-2 gap-4 text-sm text-gray-300">
            <div className="space-y-2">
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">1</span>
                </div>
                <div>
                  <strong className="text-purple-400">Use Tor or VPN:</strong> Always connect through Tor Browser or a trusted VPN service for maximum anonymity when accessing privacy tools.
                </div>
              </div>
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">2</span>
                </div>
                <div>
                  <strong className="text-purple-400">Verify URLs:</strong> Always double-check website URLs before connecting wallets. Bookmark official sites to avoid phishing.
                </div>
              </div>
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">3</span>
                </div>
                <div>
                  <strong className="text-purple-400">Hardware Wallets:</strong> Use hardware wallets (Ledger, Trezor) for storing large amounts. Never share your seed phrase.
                </div>
              </div>
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">4</span>
                </div>
                <div>
                  <strong className="text-purple-400">Privacy Coins:</strong> Use Monero (XMR), Zcash (ZEC) shielded transactions, or mixing services for enhanced transaction privacy.
                </div>
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">5</span>
                </div>
                <div>
                  <strong className="text-purple-400">Clean Addresses:</strong> Never reuse addresses. Use new addresses for each transaction to avoid transaction linkability.
                </div>
              </div>
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">6</span>
                </div>
                <div>
                  <strong className="text-purple-400">Regulatory Awareness:</strong> Privacy tools may not be available in all jurisdictions. Always comply with local regulations.
                </div>
              </div>
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">7</span>
                </div>
                <div>
                  <strong className="text-purple-400">Mixing Services:</strong> Research mixing/tumbling services thoroughly. Use reputable services with good track records.
                </div>
              </div>
              <div className="flex items-start gap-2">
                <div className="w-6 h-6 bg-purple-500/20 rounded flex items-center justify-center flex-shrink-0 mt-0.5">
                  <span className="text-purple-400">8</span>
                </div>
                <div>
                  <strong className="text-purple-400">Browser Security:</strong> Use privacy-focused browsers (Brave, Tor) and disable tracking. Clear cookies regularly.
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="mt-6 bg-gradient-to-br from-purple-900/20 to-gray-900/20 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20">
          <h3 className="text-lg font-bold mb-3 flex items-center gap-2">
            <Lock className="w-5 h-5 text-purple-400" />
            Recommended Privacy Setup
          </h3>
          <div className="text-sm text-gray-300 space-y-3">
            <p><strong className="text-purple-400">Layer 1 - Network:</strong> Tor Browser + VPN (Mullvad, ProtonVPN, IVPN)</p>
            <p><strong className="text-purple-400">Layer 2 - Wallet:</strong> Hardware wallet (Ledger/Trezor) + MetaMask/Rabby for dApp connections</p>
            <p><strong className="text-purple-400">Layer 3 - Transactions:</strong> Privacy coins (Monero, Zcash) or mixers (Tornado Cash alternatives, Railway)</p>
            <p><strong className="text-purple-400">Layer 4 - Best Practices:</strong> New addresses per transaction, avoid KYC exchanges when possible, use DEXs</p>
          </div>
        </div>
      </div>

      <footer className="mt-12 bg-gray-900/80 border-t border-gray-800 py-6">
        <div className="max-w-7xl mx-auto px-4 text-center text-sm text-gray-400">
          <p className="mb-2">
            <strong className="text-purple-400">Disclaimer:</strong> This tool is for educational purposes. Always research and understand the privacy tools before using them.
          </p>
          <p>Privacy Crypto Hub • Secure • Anonymous • Decentralized</p>
        </div>
      </footer>
    </div>
  );
}