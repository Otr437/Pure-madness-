#Requires -RunAsAdministrator

<#
.SYNOPSIS
    OSINT Tools Installation Script for Windows
.DESCRIPTION
    Installs all OSINT tools from class video on Windows 10/11
.NOTES
    Run this script as Administrator in PowerShell
#>

# Colors for output
function Write-Status {
    param($Message)
    Write-Host "[*] $Message" -ForegroundColor Cyan
}

function Write-Success {
    param($Message)
    Write-Host "[✓] $Message" -ForegroundColor Green
}

function Write-Error-Custom {
    param($Message)
    Write-Host "[✗] $Message" -ForegroundColor Red
}

function Write-Warning-Custom {
    param($Message)
    Write-Host "[!] $Message" -ForegroundColor Yellow
}

# Check if running as Administrator
$currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
if (-not $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Error-Custom "This script must be run as Administrator!"
    Write-Host "Right-click PowerShell and select 'Run as Administrator'"
    exit 1
}

# Set execution policy
Set-ExecutionPolicy Bypass -Scope Process -Force

$TOOLS_DIR = "C:\OSINT-Tools"
$LOG_FILE = "$TOOLS_DIR\installation.log"

Write-Status "Starting OSINT Tools Installation for Windows..."
Write-Status "Installation directory: $TOOLS_DIR"
Start-Transcript -Path $LOG_FILE -Append

# Create tools directory
if (-not (Test-Path $TOOLS_DIR)) {
    New-Item -ItemType Directory -Path $TOOLS_DIR | Out-Null
    Write-Success "Created tools directory: $TOOLS_DIR"
}

Set-Location $TOOLS_DIR

#############################################
# INSTALL CHOCOLATEY (Package Manager)
#############################################
Write-Status "Checking for Chocolatey package manager..."
if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
    Write-Status "Installing Chocolatey..."
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
    Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
    Write-Success "Chocolatey installed"
} else {
    Write-Success "Chocolatey already installed"
}

# Refresh environment
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

#############################################
# INSTALL PREREQUISITES
#############################################
Write-Status "Installing prerequisites..."

# Python 3
if (-not (Get-Command python -ErrorAction SilentlyContinue)) {
    Write-Status "Installing Python 3..."
    choco install python -y
    Write-Success "Python 3 installed"
} else {
    Write-Success "Python 3 already installed"
}

# Git
if (-not (Get-Command git -ErrorAction SilentlyContinue)) {
    Write-Status "Installing Git..."
    choco install git -y
    Write-Success "Git installed"
} else {
    Write-Success "Git already installed"
}

# Java (for some tools)
if (-not (Get-Command java -ErrorAction SilentlyContinue)) {
    Write-Status "Installing Java..."
    choco install openjdk -y
    Write-Success "Java installed"
} else {
    Write-Success "Java already installed"
}

# Refresh PATH after installations
$env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

Write-Success "Prerequisites installed"

#############################################
# 1. SPIDERFOOT
#############################################
Write-Status "[1/20] Installing SpiderFoot..."
$spiderfootPath = "$TOOLS_DIR\spiderfoot"
if (Test-Path $spiderfootPath) {
    Write-Warning-Custom "SpiderFoot exists, updating..."
    Set-Location $spiderfootPath
    git pull
    Set-Location $TOOLS_DIR
} else {
    git clone https://github.com/smicallef/spiderfoot.git
    Set-Location $spiderfootPath
    pip install -r requirements.txt
    Set-Location $TOOLS_DIR
}

if (Test-Path "$spiderfootPath\sf.py") {
    Write-Success "SpiderFoot installed"
    Write-Host "  Usage: cd $spiderfootPath && python sf.py -l 127.0.0.1:5001" -ForegroundColor Gray
} else {
    Write-Error-Custom "SpiderFoot installation failed"
}

#############################################
# 2. HOLEHE
#############################################
Write-Status "[2/20] Installing Holehe..."
try {
    pip install holehe
    Write-Success "Holehe installed"
    Write-Host "  Usage: holehe email@example.com" -ForegroundColor Gray
} catch {
    Write-Error-Custom "Holehe installation failed"
}

#############################################
# 3. RECON-NG
#############################################
Write-Status "[3/20] Installing Recon-ng..."
$reconngPath = "$TOOLS_DIR\recon-ng"
if (Test-Path $reconngPath) {
    Write-Warning-Custom "Recon-ng exists, updating..."
    Set-Location $reconngPath
    git pull
    Set-Location $TOOLS_DIR
} else {
    git clone https://github.com/lanmaster53/recon-ng.git
    Set-Location $reconngPath
    pip install -r REQUIREMENTS
    Set-Location $TOOLS_DIR
}

if (Test-Path "$reconngPath\recon-ng") {
    Write-Success "Recon-ng installed"
    Write-Host "  Usage: cd $reconngPath && python recon-ng" -ForegroundColor Gray
} else {
    Write-Error-Custom "Recon-ng installation failed"
}

#############################################
# 4. MALTEGO
#############################################
Write-Status "[4/20] Installing Maltego..."
Write-Warning-Custom "Maltego requires manual download and installation"
Write-Host "  Download from: https://www.maltego.com/downloads/" -ForegroundColor Gray
Write-Host "  Opening browser..." -ForegroundColor Gray
Start-Process "https://www.maltego.com/downloads/"

#############################################
# 5. SHODAN
#############################################
Write-Status "[5/20] Installing Shodan CLI..."
try {
    pip install shodan
    Write-Success "Shodan installed"
    Write-Host "  Usage: shodan init YOUR_API_KEY" -ForegroundColor Gray
    Write-Host "  Get API key from: https://account.shodan.io/" -ForegroundColor Gray
} catch {
    Write-Error-Custom "Shodan installation failed"
}

#############################################
# 6. METAGOOFIL
#############################################
Write-Status "[6/20] Installing Metagoofil..."
$metagoofilPath = "$TOOLS_DIR\metagoofil"
if (Test-Path $metagoofilPath) {
    Write-Warning-Custom "Metagoofil exists, updating..."
    Set-Location $metagoofilPath
    git pull
    Set-Location $TOOLS_DIR
} else {
    git clone https://github.com/laramies/metagoofil.git
    Set-Location $metagoofilPath
    pip install -r requirements.txt
    Set-Location $TOOLS_DIR
}

if (Test-Path "$metagoofilPath\metagoofil.py") {
    Write-Success "Metagoofil installed"
    Write-Host "  Usage: cd $metagoofilPath && python metagoofil.py -d example.com -t pdf,doc" -ForegroundColor Gray
} else {
    Write-Error-Custom "Metagoofil installation failed"
}

#############################################
# 7. THEHARVESTER
#############################################
Write-Status "[7/20] Installing theHarvester..."
$harvesterPath = "$TOOLS_DIR\theHarvester"
if (Test-Path $harvesterPath) {
    Write-Warning-Custom "theHarvester exists, updating..."
    Set-Location $harvesterPath
    git pull
    Set-Location $TOOLS_DIR
} else {
    git clone https://github.com/laramies/theHarvester.git
    Set-Location $harvesterPath
    pip install -r requirements.txt
    Set-Location $TOOLS_DIR
}

if (Test-Path "$harvesterPath\theHarvester.py") {
    Write-Success "theHarvester installed"
    Write-Host "  Usage: cd $harvesterPath && python theHarvester.py -d example.com -b all" -ForegroundColor Gray
} else {
    Write-Error-Custom "theHarvester installation failed"
}

#############################################
# 8. EXIFTOOL
#############################################
Write-Status "[8/20] Installing Exiftool..."
choco install exiftool -y
if (Get-Command exiftool -ErrorAction SilentlyContinue) {
    Write-Success "Exiftool installed"
    Write-Host "  Usage: exiftool image.jpg" -ForegroundColor Gray
} else {
    Write-Error-Custom "Exiftool installation failed"
}

#############################################
# 9. CREEPY
#############################################
Write-Status "[9/20] Installing Creepy..."
$creepyPath = "$TOOLS_DIR\creepy"
if (Test-Path $creepyPath) {
    Write-Warning-Custom "Creepy exists, updating..."
    Set-Location $creepyPath
    git pull
    Set-Location $TOOLS_DIR
} else {
    git clone https://github.com/ilektrojohn/creepy.git
    Set-Location $creepyPath
    pip install -r requirements.txt -ErrorAction SilentlyContinue
    Set-Location $TOOLS_DIR
}

if (Test-Path $creepyPath) {
    Write-Success "Creepy installed (may have dependency issues)"
    Write-Host "  Note: Creepy requires manual configuration" -ForegroundColor Gray
} else {
    Write-Error-Custom "Creepy installation failed"
}

#############################################
# 10. DNSENUM (Python alternative)
#############################################
Write-Status "[10/20] Installing DNS enumeration tools..."
Write-Warning-Custom "DNSenum is primarily Linux-based"
Write-Host "  Alternative: Use nslookup, dig (via bind), or dnspython" -ForegroundColor Gray
pip install dnspython

#############################################
# 11. WRECON
#############################################
Write-Status "[11/20] Installing WRecon..."
$wreconPath = "$TOOLS_DIR\WRecon"
if (Test-Path $wreconPath) {
    Write-Warning-Custom "WRecon exists, updating..."
    Set-Location $wreconPath
    git pull
    Set-Location $TOOLS_DIR
} else {
    git clone https://github.com/MrCl0wnLab/WRecon.git
    Set-Location $wreconPath
    pip install -r requirements.txt
    Set-Location $TOOLS_DIR
}

if (Test-Path "$wreconPath\wrecon.py") {
    Write-Success "WRecon installed"
    Write-Host "  Usage: cd $wreconPath && python wrecon.py -u https://example.com" -ForegroundColor Gray
} else {
    Write-Error-Custom "WRecon installation failed"
}

#############################################
# 12. FOCA
#############################################
Write-Status "[12/20] Installing FOCA..."
Write-Success "FOCA is a Windows-native tool"
Write-Host "  Download from: https://github.com/ElevenPaths/FOCA" -ForegroundColor Gray
Write-Host "  Opening browser..." -ForegroundColor Gray
Start-Process "https://github.com/ElevenPaths/FOCA/releases"

#############################################
# 13. SKIPFISH
#############################################
Write-Status "[13/20] Skipfish (Linux-based)..."
Write-Warning-Custom "Skipfish is primarily for Linux"
Write-Host "  Windows alternative: Use OWASP ZAP or Burp Suite" -ForegroundColor Gray

#############################################
# 14. NMAP
#############################################
Write-Status "[14/20] Installing Nmap..."
choco install nmap -y
if (Get-Command nmap -ErrorAction SilentlyContinue) {
    Write-Success "Nmap installed"
    Write-Host "  Usage: nmap -sV 192.168.1.1" -ForegroundColor Gray
} else {
    Write-Error-Custom "Nmap installation failed"
}

#############################################
# 15. WIRESHARK
#############################################
Write-Status "[15/20] Installing Wireshark..."
choco install wireshark -y
if (Get-Command wireshark -ErrorAction SilentlyContinue) {
    Write-Success "Wireshark installed"
    Write-Host "  Usage: wireshark (GUI) or tshark (CLI)" -ForegroundColor Gray
} else {
    Write-Error-Custom "Wireshark installation failed"
}

#############################################
# 16. BURP SUITE
#############################################
Write-Status "[16/20] Installing Burp Suite Community..."
Write-Warning-Custom "Opening Burp Suite download page..."
Write-Host "  Download from: https://portswigger.net/burp/communitydownload" -ForegroundColor Gray
Start-Process "https://portswigger.net/burp/communitydownload"

#############################################
# 17. HYDRA (THC-Hydra Windows version)
#############################################
Write-Status "[17/20] Installing Hydra..."
Write-Warning-Custom "Hydra for Windows requires manual setup"
Write-Host "  Download from: https://github.com/maaaaz/thc-hydra-windows" -ForegroundColor Gray
Start-Process "https://github.com/maaaaz/thc-hydra-windows"

#############################################
# 18. JOHN THE RIPPER
#############################################
Write-Status "[18/20] Installing John the Ripper..."
$johnPath = "$TOOLS_DIR\john"
Write-Status "Downloading John the Ripper..."
$johnUrl = "https://www.openwall.com/john/k/john-1.9.0-jumbo-1-win64.zip"
$johnZip = "$TOOLS_DIR\john.zip"

try {
    Invoke-WebRequest -Uri $johnUrl -OutFile $johnZip
    Expand-Archive -Path $johnZip -DestinationPath $TOOLS_DIR -Force
    Remove-Item $johnZip
    Write-Success "John the Ripper installed"
    Write-Host "  Usage: cd $TOOLS_DIR\john\run && john.exe hashes.txt" -ForegroundColor Gray
} catch {
    Write-Error-Custom "John the Ripper installation failed"
}

#############################################
# 19. AIRCRACK-NG
#############################################
Write-Status "[19/20] Installing Aircrack-ng..."
Write-Warning-Custom "Aircrack-ng for Windows has limited functionality"
Write-Host "  Download from: https://www.aircrack-ng.org/downloads.html" -ForegroundColor Gray
Start-Process "https://www.aircrack-ng.org/downloads.html"

#############################################
# 20. METASPLOIT FRAMEWORK
#############################################
Write-Status "[20/20] Installing Metasploit Framework..."
Write-Status "Opening Metasploit download page..."
Write-Host "  Download Windows installer from: https://www.rapid7.com/products/metasploit/download/" -ForegroundColor Gray
Start-Process "https://www.rapid7.com/products/metasploit/download/"
Write-Warning-Custom "Install Metasploit manually after download completes"

#############################################
# CREATE HELPER SCRIPTS
#############################################
Write-Status "Creating helper scripts..."

# Create quick start script
$quickStartContent = @'
@echo off
echo ===================================
echo      OSINT Tools Quick Reference
echo ===================================
echo.
echo 1.  SpiderFoot:    cd C:\OSINT-Tools\spiderfoot ^&^& python sf.py -l 127.0.0.1:5001
echo 2.  Holehe:        holehe email@example.com
echo 3.  Recon-ng:      cd C:\OSINT-Tools\recon-ng ^&^& python recon-ng
echo 4.  Maltego:       maltego (if installed)
echo 5.  Shodan:        shodan search apache
echo 6.  Metagoofil:    cd C:\OSINT-Tools\metagoofil ^&^& python metagoofil.py -d example.com
echo 7.  theHarvester:  cd C:\OSINT-Tools\theHarvester ^&^& python theHarvester.py -d example.com -b all
echo 8.  Exiftool:      exiftool image.jpg
echo 9.  Creepy:        cd C:\OSINT-Tools\creepy
echo 10. DNS Tools:     nslookup / dnspython
echo 11. WRecon:        cd C:\OSINT-Tools\WRecon ^&^& python wrecon.py -u https://example.com
echo 12. FOCA:          Launch FOCA application
echo 13. Skipfish:      Use OWASP ZAP or Burp Suite
echo 14. Nmap:          nmap -sV -sC 192.168.1.1
echo 15. Wireshark:     wireshark
echo 16. Burp Suite:    burpsuite
echo 17. Hydra:         Launch Hydra application
echo 18. John:          cd C:\OSINT-Tools\john\run ^&^& john.exe hashes.txt
echo 19. Aircrack-ng:   Launch Aircrack-ng
echo 20. Metasploit:    msfconsole
echo.
pause
'@

$quickStartContent | Out-File -FilePath "$TOOLS_DIR\OSINT-Tools-Menu.bat" -Encoding ASCII

Write-Success "Helper scripts created"

#############################################
# FINAL SUMMARY
#############################################
Write-Host ""
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "     Installation Complete!" -ForegroundColor Green
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host ""
Write-Success "OSINT Tools installation finished!"
Write-Host ""
Write-Host "Installation directory: $TOOLS_DIR" -ForegroundColor Yellow
Write-Host "Log file: $LOG_FILE" -ForegroundColor Yellow
Write-Host ""
Write-Host "Quick Start:" -ForegroundColor Cyan
Write-Host "  • Run: $TOOLS_DIR\OSINT-Tools-Menu.bat" -ForegroundColor White
Write-Host ""
Write-Host "Manual Installation Required:" -ForegroundColor Yellow
Write-Host "  ✓ Maltego - https://www.maltego.com/downloads/" -ForegroundColor White
Write-Host "  ✓ Burp Suite - https://portswigger.net/burp/communitydownload" -ForegroundColor White
Write-Host "  ✓ FOCA - https://github.com/ElevenPaths/FOCA/releases" -ForegroundColor White
Write-Host "  ✓ Metasploit - https://www.rapid7.com/products/metasploit/download/" -ForegroundColor White
Write-Host "  ✓ Aircrack-ng - https://www.aircrack-ng.org/downloads.html" -ForegroundColor White
Write-Host "  ✓ Hydra - https://github.com/maaaaz/thc-hydra-windows" -ForegroundColor White
Write-Host ""
Write-Host "Important Notes:" -ForegroundColor Cyan
Write-Host "  • Get Shodan API key: https://account.shodan.io/" -ForegroundColor White
Write-Host "  • Configure API keys for theHarvester" -ForegroundColor White
Write-Host "  • Some tools work better in WSL (Windows Subsystem for Linux)" -ForegroundColor White
Write-Host "  • Restart your terminal after installation" -ForegroundColor White
Write-Host ""
Write-Host "Next Steps:" -ForegroundColor Cyan
Write-Host "  1. Complete manual installations from opened browser tabs" -ForegroundColor White
Write-Host "  2. Restart terminal or reboot computer" -ForegroundColor White
Write-Host "  3. Run: $TOOLS_DIR\OSINT-Tools-Menu.bat" -ForegroundColor White
Write-Host "  4. Configure API keys where needed" -ForegroundColor White
Write-Host ""

Stop-Transcript

Write-Host "Press any key to exit..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")